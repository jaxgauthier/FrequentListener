document.addEventListener('DOMContentLoaded',function(){const loginForm=document.getElementById('loginForm');const signupForm=document.getElementById('signupForm');const errorMessage=document.getElementById('errorMessage');function showError(message){errorMessage.textContent=message;errorMessage.style.display='block';errorMessage.className='error-message';}
function showSuccess(message){errorMessage.textContent=message;errorMessage.style.display='block';errorMessage.className='success-message';}
function hideMessage(){errorMessage.style.display='none';}
if(loginForm){loginForm.addEventListener('submit',function(e){e.preventDefault();hideMessage();const formData=new FormData(loginForm);const data={identifier:formData.get('identifier'),password:formData.get('password')};fetch('/login',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify(data)}).then(response=>{if(response.redirected){window.location.href=response.url;}else if(response.ok){return response.json();}else{throw new Error('Login failed');}}).then(data=>{if(data&&data.success){showSuccess(data.message);setTimeout(()=>{window.location.href='/';},1000);}else if(data){showError(data.error||'Login failed');}}).catch(error=>{console.error('Error:',error);showError('Network error occurred');});});}
if(signupForm){signupForm.addEventListener('submit',function(e){e.preventDefault();hideMessage();const formData=new FormData(signupForm);const data={username:formData.get('username'),email:formData.get('email'),password:formData.get('password'),confirm_password:formData.get('confirm_password')};if(data.password!==data.confirm_password){showError('Passwords do not match');return;}
if(data.password.length<6){showError('Password must be at least 6 characters');return;}
if(!/^[a-zA-Z0-9_]+$/.test(data.username)){showError('Username can only contain letters, numbers, and underscores');return;}
fetch('/signup',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify(data)}).then(response=>response.json()).then(data=>{if(data.success){showSuccess(data.message);setTimeout(()=>{window.location.href='/';},1000);}else{showError(data.error||'Signup failed');}}).catch(error=>{console.error('Error:',error);showError('Network error occurred');});});}});document.addEventListener('DOMContentLoaded',function(){const adminLoginForm=document.getElementById('adminLoginForm');const errorMessage=document.getElementById('errorMessage');adminLoginForm.addEventListener('submit',function(e){e.preventDefault();const username=document.getElementById('username').value.trim();const password=document.getElementById('password').value;errorMessage.style.display='none';if(!username||!password){showError('Please enter both username and password');return;}
const submitBtn=adminLoginForm.querySelector('button[type="submit"]');const originalText=submitBtn.textContent;submitBtn.textContent='Logging in...';submitBtn.disabled=true;fetch('/admin/login',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify({username:username,password:password})}).then(response=>response.json()).then(data=>{if(data.success){window.location.href=data.redirect;}else{showError(data.error||'Login failed');}}).catch(error=>{console.error('Login error:',error);showError('Network error. Please try again.');}).finally(()=>{submitBtn.textContent=originalText;submitBtn.disabled=false;});});function showError(message){errorMessage.textContent=message;errorMessage.style.display='block';setTimeout(()=>{errorMessage.style.display='none';},5000);}});document.addEventListener('DOMContentLoaded',function(){window.toggleDropdown=function(){const dropdown=document.getElementById('dropdownMenu');dropdown.classList.toggle('show');};document.addEventListener('click',function(event){const dropdown=document.getElementById('dropdownMenu');const logoBtn=document.querySelector('.logo-btn');if(!logoBtn.contains(event.target)&&!dropdown.contains(event.target)){dropdown.classList.remove('show');}});const guessForm=document.getElementById('guessForm');const songGuessInput=document.getElementById('songGuess');const searchSuggestions=document.getElementById('searchSuggestions');const resultsSection=document.getElementById('resultsSection');const resultMessage=document.getElementById('resultMessage');const correctAnswer=document.getElementById('correctAnswer');console.log('DOM loaded, form found:',guessForm);let currentDifficulty=0;let frequencies=[];function getAvailableFrequencies(){const audioPlayers=document.querySelectorAll('.audio-player');frequencies=[];audioPlayers.forEach(player=>{const freq=player.id.replace('audio-','');frequencies.push(freq);});console.log('Available frequencies:',frequencies);}
let searchTimeout;let selectedSuggestionIndex=-1;getAvailableFrequencies();showCurrentDifficulty();const difficultyInput=document.getElementById('difficultyLevel');if(difficultyInput){difficultyInput.value=currentDifficulty;}
const scoreInput=document.getElementById('currentScore');if(scoreInput){const initialScore=Math.max(0,8-currentDifficulty);scoreInput.value=initialScore;}
function updateScoreDisplay(){const scoreInput=document.getElementById('currentScore');const scoreDisplay=document.getElementById('scoreDisplay');if(scoreInput&&scoreDisplay){scoreDisplay.textContent=scoreInput.value;}}
updateScoreDisplay();songGuessInput.addEventListener('input',function(){const query=this.value.trim();if(searchTimeout){clearTimeout(searchTimeout);}
if(query.length<2){hideSuggestions();return;}
searchTimeout=setTimeout(()=>{searchSpotify(query);},300);});songGuessInput.addEventListener('keydown',function(e){const suggestions=searchSuggestions.querySelectorAll('.search-suggestion-item');if(suggestions.length===0)return;switch(e.key){case'ArrowDown':e.preventDefault();selectedSuggestionIndex=Math.min(selectedSuggestionIndex+1,suggestions.length-1);updateSelectedSuggestion(suggestions);break;case'ArrowUp':e.preventDefault();selectedSuggestionIndex=Math.max(selectedSuggestionIndex-1,-1);updateSelectedSuggestion(suggestions);break;case'Enter':e.preventDefault();if(selectedSuggestionIndex>=0&&suggestions[selectedSuggestionIndex]){selectSuggestion(suggestions[selectedSuggestionIndex]);}else{guessForm.dispatchEvent(new Event('submit'));}
break;case'Escape':hideSuggestions();selectedSuggestionIndex=-1;break;}});document.addEventListener('click',function(e){if(!songGuessInput.contains(e.target)&&!searchSuggestions.contains(e.target)){hideSuggestions();selectedSuggestionIndex=-1;}});function searchSpotify(query){fetch(`/spotify_search?q=${encodeURIComponent(query)}`).then(response=>response.json()).then(data=>{if(data.tracks&&data.tracks.length>0){showSuggestions(data.tracks);}else{hideSuggestions();}}).catch(error=>{console.error('Search error:',error);hideSuggestions();});}
function showSuggestions(tracks){searchSuggestions.innerHTML='';const limitedTracks=tracks.slice(0,5);limitedTracks.forEach((track,index)=>{const suggestionItem=document.createElement('div');suggestionItem.className='search-suggestion-item';suggestionItem.innerHTML=`<div class="suggestion-title">${track.name}</div><div class="suggestion-artist">${track.artist}</div><div class="suggestion-album">${track.album}</div>`;suggestionItem.addEventListener('click',()=>selectSuggestion(suggestionItem));suggestionItem.addEventListener('mouseenter',()=>{selectedSuggestionIndex=index;updateSelectedSuggestion(searchSuggestions.querySelectorAll('.search-suggestion-item'));});searchSuggestions.appendChild(suggestionItem);});searchSuggestions.style.display='block';selectedSuggestionIndex=-1;}
function hideSuggestions(){searchSuggestions.style.display='none';searchSuggestions.innerHTML='';}
function updateSelectedSuggestion(suggestions){suggestions.forEach((item,index)=>{if(index===selectedSuggestionIndex){item.style.backgroundColor='#e3f2fd';}else{item.style.backgroundColor='';}});}
function selectSuggestion(suggestionItem){const title=suggestionItem.querySelector('.suggestion-title').textContent;const artist=suggestionItem.querySelector('.suggestion-artist').textContent;songGuessInput.value=`${title}-${artist}`;hideSuggestions();selectedSuggestionIndex=-1;songGuessInput.focus();}
function showCurrentDifficulty(){for(let i=0;i<=currentDifficulty;i++){const audioPlayer=document.getElementById(`audio-${frequencies[i]}`);if(audioPlayer){audioPlayer.style.display='block';}}
for(let i=currentDifficulty+1;i<frequencies.length;i++){const audioPlayer=document.getElementById(`audio-${frequencies[i]}`);if(audioPlayer){audioPlayer.style.display='none';}}}
function revealNextDifficulty(){currentDifficulty++;if(currentDifficulty<frequencies.length){setTimeout(()=>{const nextAudioPlayer=document.getElementById(`audio-${frequencies[currentDifficulty]}`);if(nextAudioPlayer){nextAudioPlayer.style.display='block';nextAudioPlayer.scrollIntoView({behavior:'smooth',block:'center'});}},1000);}}
function shouldShowResults(){return currentDifficulty>=frequencies.length-1;}
function showAllFrequencies(){currentDifficulty=frequencies.length-1;showCurrentDifficulty();const difficultyInput=document.getElementById('difficultyLevel');if(difficultyInput){difficultyInput.value=currentDifficulty;}
const scoreInput=document.getElementById('currentScore');if(scoreInput){scoreInput.value=0;updateScoreDisplay();}
document.querySelector('.plus-button-container').style.display='none';}
window.addNextDifficulty=function(){console.log('Adding next difficulty level');if(currentDifficulty>=frequencies.length-1){resultsSection.style.display='block';resultMessage.innerHTML='<p style="color: orange; font-weight: bold;">You\'ve revealed all difficulty levels. Here\'s the answer:</p>';const statsSection=document.querySelector('.user-stats-section');if(statsSection){statsSection.style.display='block';}
fetch('/submit_guess',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify({song_title:'Mr Brightside',artist:'The Killers',guess:'skip_all'})}).then(response=>response.json()).then(data=>{if(data.correct){correctAnswer.innerHTML=`<h4>🎉 Correct!</h4><p>The song is:${data.song_title}by ${data.artist}</p>`;}else{correctAnswer.innerHTML=`<h4>❌ Incorrect</h4><p>The correct answer is:${data.song_title}by ${data.artist}</p>`;}}).catch(error=>{console.error('Error:',error);correctAnswer.innerHTML='<p>Error getting answer</p>';});document.querySelector('.plus-button-container').style.display='none';return;}
currentDifficulty++;showCurrentDifficulty();const difficultyInput=document.getElementById('difficultyLevel');if(difficultyInput){difficultyInput.value=currentDifficulty;}
const scoreInput=document.getElementById('currentScore');if(scoreInput){const newScore=Math.max(0,8-currentDifficulty);scoreInput.value=newScore;updateScoreDisplay();}
if(currentDifficulty>=frequencies.length-1){document.querySelector('.plus-button-container').style.display='none';}};async function updateStatsSection(){const statsSection=document.querySelector('.user-stats-section');if(!statsSection)return;const res=await fetch('/current_stats');const data=await res.json();if(!data.success)return;const stats=data.stats;const song=data.song;const avgScoreElem=statsSection.querySelector('.average-score-value');if(avgScoreElem){avgScoreElem.textContent=stats.song_stats.average_score.toFixed(1);}
const avgExpElem=statsSection.querySelector('.average-score-explanation small');if(avgExpElem){avgExpElem.textContent=`Average score for ${song.title}by ${song.artist}`;}
for(let score=0;score<8;score++){const bar=statsSection.querySelector(`.bar-group:nth-child(${score+1}).bar`);const count=statsSection.querySelector(`.bar-group:nth-child(${score+1}).bar-count`);if(bar){const pct=stats.individual_stats.max_count>0?(stats.individual_stats.points_distribution[score]||0)/stats.individual_stats.max_count*100:0;bar.style.height=pct+'%';}
if(count){count.textContent=stats.individual_stats.points_distribution[score]||0;}}
const alreadyMsg=statsSection.querySelector('.already-played-message');if(alreadyMsg){alreadyMsg.style.display=stats.has_played_current?'block':'none';}
statsSection.style.display='block';if(stats.has_played_current){if(guessForm)guessForm.style.display='none';const plusBtn=document.querySelector('.plus-button-container');if(plusBtn)plusBtn.style.display='none';}}
async function checkIfAlreadyPlayed(){try{const res=await fetch('/current_stats');const data=await res.json();if(data.success&&data.stats.has_played_current){showAllFrequencies();await updateStatsSection();}}catch(error){console.error('Error checking if already played:',error);}}
checkIfAlreadyPlayed();guessForm.addEventListener('submit',async function(e){e.preventDefault();console.log('Form submitted');const formData=new FormData(guessForm);const songGuess=formData.get('song_guess');const difficultyLevel=formData.get('difficulty_level');console.log('Song guess:',songGuess);const response=await fetch('/submit_guess',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify({song_guess:songGuess,difficulty_level:parseInt(difficultyLevel)||0})});const data=await response.json();console.log('Response data:',data);if(data.already_played){resultsSection.style.display='block';resultMessage.innerHTML=`<p style="color: orange; font-weight: bold;">${data.message}</p>`;correctAnswer.textContent=data.correct_answer;await updateStatsSection();return;}
if(data.correct){resultsSection.style.display='block';resultMessage.innerHTML=`<p style="color: green; font-weight: bold;">Correct!Well done!Score:${data.score}</p>`;correctAnswer.textContent=data.correct_answer;await updateStatsSection();showAllFrequencies();}else{const scoreInput=document.getElementById('currentScore');if(scoreInput){const currentScore=parseInt(scoreInput.value);const newScore=Math.max(0,currentScore-1);scoreInput.value=newScore;updateScoreDisplay();}
if(shouldShowResults()){resultsSection.style.display='block';resultMessage.innerHTML='<p style="color: red; font-weight: bold;">Incorrect. Here\'s the answer:</p>';correctAnswer.textContent=data.correct_answer;await updateStatsSection();}else{resultsSection.style.display='none';const tempMessage=document.createElement('div');tempMessage.innerHTML='<p style="color: red; font-weight: bold; text-align: center; margin: 1rem 0;">Incorrect. Try again!</p>';tempMessage.id='tempMessage';const existingTemp=document.getElementById('tempMessage');if(existingTemp){existingTemp.remove();}
guessForm.parentNode.insertBefore(tempMessage,guessForm.nextSibling);setTimeout(()=>{const tempMsg=document.getElementById('tempMessage');if(tempMsg){tempMsg.remove();}},2000);}
revealNextDifficulty();}
guessForm.reset();});function getRevealedFrequencies(){const revealed=[];document.querySelectorAll('.audio-player').forEach(function(player){if(player.style.display!=='none'){const freq=player.id.replace('audio-','');revealed.push(freq);}});return revealed;}
function setRevealedFrequencies(freqs){document.querySelectorAll('.audio-player').forEach(function(player,idx){const freq=player.id.replace('audio-','');if(freqs.includes(freq)){player.style.display='';}else{player.style.display='none';}});if(window.frequencies&&Array.isArray(window.frequencies)){window.currentDifficulty=freqs.length-1;}else if(typeof currentDifficulty!=='undefined'){currentDifficulty=freqs.length-1;}
var difficultyInput=document.getElementById('difficultyLevel');if(difficultyInput)difficultyInput.value=freqs.length-1;var scoreInput=document.getElementById('currentScore');var score=Math.max(8-(freqs.length-1),1);if(scoreInput)scoreInput.value=score;var scoreEl=document.getElementById('scoreDisplay');if(scoreEl)scoreEl.textContent=score;}
function savePlayerState(){const revealed=getRevealedFrequencies();if(window.isLoggedIn){fetch('/api/save_player_state',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({song_id:window.currentSongId,revealed_frequencies:revealed})});}else{const key='revealedPlayers_'+window.currentSongId;localStorage.setItem(key,JSON.stringify(revealed));}}
function loadPlayerState(){if(window.isLoggedIn){fetch('/api/get_player_state?song_id='+window.currentSongId).then(resp=>resp.json()).then(data=>{if(data.success&&Array.isArray(data.revealed_frequencies)&&data.revealed_frequencies.length>0){setRevealedFrequencies(data.revealed_frequencies);}else{setRevealedFrequencies([document.querySelector('.audio-player').id.replace('audio-','')]);}});}else{const key='revealedPlayers_'+window.currentSongId;const val=localStorage.getItem(key);if(val){try{const arr=JSON.parse(val);if(Array.isArray(arr)&&arr.length>0){setRevealedFrequencies(arr);return;}}catch{}}
setRevealedFrequencies([document.querySelector('.audio-player').id.replace('audio-','')]);}}
const origAddNextDifficulty=window.addNextDifficulty;window.addNextDifficulty=function(){if(typeof origAddNextDifficulty==='function')origAddNextDifficulty();savePlayerState();};loadPlayerState();document.querySelectorAll('.custom-audio-player').forEach(function(wrapper){var audioId=wrapper.getAttribute('data-audio-id');var audio=document.getElementById(audioId);var playBtn=wrapper.querySelector('.custom-audio-play');var iconSpan=playBtn.querySelector('.custom-audio-icon');var timeDisplay=wrapper.querySelector('.custom-audio-time');var progress=wrapper.querySelector('.custom-audio-progress');if(!audio||!playBtn||!iconSpan||!timeDisplay||!progress)return;var playSVG='<svg class="icon-play" width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg"><polygon points="5,3 19,11 5,19" fill="currentColor"/></svg>';var pauseSVG='<svg class="icon-pause" width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg"><rect x="5" y="3" width="4" height="16" fill="currentColor"/><rect x="13" y="3" width="4" height="16" fill="currentColor"/></svg>';playBtn.addEventListener('click',function(){if(audio.paused){audio.play();}else{audio.pause();}});audio.addEventListener('play',function(){playBtn.setAttribute('data-state','pause');iconSpan.innerHTML=pauseSVG;});audio.addEventListener('pause',function(){playBtn.setAttribute('data-state','play');iconSpan.innerHTML=playSVG;});audio.addEventListener('timeupdate',function(){var cur=Math.floor(audio.currentTime);var dur=Math.floor(audio.duration)||0;timeDisplay.textContent=formatTime(cur)+' / '+formatTime(dur);var percent=(audio.currentTime/(audio.duration||1))*100;progress.value=percent;});progress.addEventListener('input',function(){var seekTime=(progress.value/100)*(audio.duration||1);audio.currentTime=seekTime;});audio.addEventListener('ended',function(){playBtn.setAttribute('data-state','play');iconSpan.innerHTML=playSVG;progress.value=0;});audio.addEventListener('loadedmetadata',function(){var dur=Math.floor(audio.duration)||0;timeDisplay.textContent='0:00 / '+formatTime(dur);});});function formatTime(sec){var m=Math.floor(sec/60);var s=Math.floor(sec%60);return m+':'+(s<10?'0':'')+s;}});let searchTimeout;let selectedSuggestionIndex=-1;let selectedSpotifyTrack=null;document.addEventListener('DOMContentLoaded',function(){const spotifySearch=document.getElementById('spotifySearch');const spotifySuggestions=document.getElementById('spotifySuggestions');const selectedSongInfo=document.getElementById('selectedSongInfo');const songDetails=document.getElementById('songDetails');const processSongBtn=document.getElementById('processSongBtn');const processingStatus=document.getElementById('processingStatus');if(spotifySearch){spotifySearch.addEventListener('input',function(){const query=this.value.trim();if(searchTimeout){clearTimeout(searchTimeout);}
if(query.length<2){hideSpotifySuggestions();return;}
searchTimeout=setTimeout(()=>{searchSpotify(query);},300);});spotifySearch.addEventListener('keydown',function(e){const suggestions=spotifySuggestions.querySelectorAll('.spotify-suggestion-item');if(suggestions.length===0)return;switch(e.key){case'ArrowDown':e.preventDefault();selectedSuggestionIndex=Math.min(selectedSuggestionIndex+1,suggestions.length-1);updateSelectedSpotifySuggestion(suggestions);break;case'ArrowUp':e.preventDefault();selectedSuggestionIndex=Math.max(selectedSuggestionIndex-1,-1);updateSelectedSpotifySuggestion(suggestions);break;case'Enter':e.preventDefault();if(selectedSuggestionIndex>=0&&suggestions[selectedSuggestionIndex]){selectSpotifySuggestion(suggestions[selectedSuggestionIndex]);}
break;case'Escape':hideSpotifySuggestions();selectedSuggestionIndex=-1;break;}});document.addEventListener('click',function(e){if(!spotifySearch.contains(e.target)&&!spotifySuggestions.contains(e.target)){hideSpotifySuggestions();selectedSuggestionIndex=-1;}});}
if(processSongBtn){processSongBtn.addEventListener('click',function(){if(selectedSpotifyTrack){processSpotifySong(selectedSpotifyTrack);}});}
const startTimeInput=document.getElementById('startTime');const endTimeInput=document.getElementById('endTime');const timeSpanDisplay=document.getElementById('timeSpan');if(startTimeInput&&endTimeInput&&timeSpanDisplay){function updateTimeSpan(){const start=parseFloat(startTimeInput.value)||0;const end=parseFloat(endTimeInput.value)||10;const span=Math.max(0,end-start);timeSpanDisplay.textContent=span.toFixed(1);}
startTimeInput.addEventListener('input',updateTimeSpan);endTimeInput.addEventListener('input',updateTimeSpan);updateTimeSpan();}
function searchSpotify(query){fetch(`/spotify_search?q=${encodeURIComponent(query)}`).then(response=>response.json()).then(data=>{if(data.tracks&&data.tracks.length>0){showSpotifySuggestions(data.tracks);}else{hideSpotifySuggestions();}}).catch(error=>{console.error('Search error:',error);hideSpotifySuggestions();});}
function showSpotifySuggestions(tracks){spotifySuggestions.innerHTML='';const limitedTracks=tracks.slice(0,5);limitedTracks.forEach((track,index)=>{const suggestionItem=document.createElement('div');suggestionItem.className='spotify-suggestion-item';suggestionItem.innerHTML=`<div class="suggestion-title">${track.name}</div><div class="suggestion-artist">${track.artist}</div><div class="suggestion-album">${track.album}</div>`;suggestionItem.addEventListener('click',()=>selectSpotifySuggestion(suggestionItem,track));suggestionItem.addEventListener('mouseenter',()=>{selectedSuggestionIndex=index;updateSelectedSpotifySuggestion(spotifySuggestions.querySelectorAll('.spotify-suggestion-item'));});spotifySuggestions.appendChild(suggestionItem);});spotifySuggestions.style.display='block';selectedSuggestionIndex=-1;}
function hideSpotifySuggestions(){spotifySuggestions.style.display='none';spotifySuggestions.innerHTML='';}
function updateSelectedSpotifySuggestion(suggestions){suggestions.forEach((item,index)=>{if(index===selectedSuggestionIndex){item.style.backgroundColor='#e3f2fd';}else{item.style.backgroundColor='';}});}
function selectSpotifySuggestion(suggestionItem,track){selectedSpotifyTrack=track;spotifySearch.value=`${track.name}-${track.artist}`;hideSpotifySuggestions();selectedSuggestionIndex=-1;songDetails.innerHTML=`<p><strong>Title:</strong>${track.name}</p><p><strong>Artist:</strong>${track.artist}</p><p><strong>Album:</strong>${track.album}</p>`;selectedSongInfo.style.display='block';spotifySearch.focus();}
function processSpotifySong(track){const week=document.getElementById('autoWeek').value;const startTime=parseFloat(document.getElementById('startTime').value)||0;const endTime=parseFloat(document.getElementById('endTime').value)||10;if(startTime<0){alert('Start time cannot be negative');return;}
if(endTime<=startTime){alert('End time must be greater than start time');return;}
if(endTime-startTime<1){alert('Time range must be at least 1 second');return;}
const progressSection=document.getElementById('progressSection');const progressBar=document.getElementById('progressBar');const progressText=document.getElementById('progressText');const progressDetails=document.getElementById('progressDetails');progressSection.style.display='block';progressBar.style.width='0%';progressText.textContent='Starting download...';progressDetails.textContent=`Downloading"${track.name}"by ${track.artist}from YouTube...`;const processBtn=document.querySelector(`button[onclick*="${track.id}"]`);if(processBtn){processBtn.disabled=true;processBtn.textContent='Processing...';}
let progress=0;const frequencies=[500,1000,1500,2000,2500,3500,5000,7500];let currentFreqIndex=0;const progressInterval=setInterval(()=>{progress+=Math.random()*12;if(progress>90)progress=90;progressBar.style.width=progress+'%';if(progress<20){progressText.textContent='Downloading audio...';progressDetails.textContent='Fetching audio from YouTube...';}else if(progress<40){progressText.textContent='Extracting segment...';progressDetails.textContent=`Extracting ${startTime}s-${endTime}s segment...`;}else if(progress<90){if(currentFreqIndex<frequencies.length){const currentFreq=frequencies[currentFreqIndex];progressText.textContent=`Generating ${currentFreq}frequencies...`;progressDetails.textContent=`Processing frequency reconstruction(${currentFreqIndex+1}/${frequencies.length})`;if(progress>40+(currentFreqIndex*7)){currentFreqIndex++;}}else{progressText.textContent='Finalizing...';progressDetails.textContent='Completing frequency reconstructions...';}}},1000);fetch('/admin/process_spotify_song',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify({spotify_id:track.id,title:track.name,artist:track.artist,album:track.album,week:parseInt(week),start_time:startTime,end_time:endTime})}).then(response=>response.json()).then(data=>{clearInterval(progressInterval);if(data.success){progressBar.style.width='100%';progressText.textContent='Complete!';progressDetails.textContent=data.message;setTimeout(()=>{progressSection.style.display='none';},3000);setTimeout(()=>{window.location.reload();},2000);}else{progressText.textContent='Error!';progressDetails.textContent=data.error||'Processing failed';progressBar.style.background='#dc3545';}
if(processBtn){processBtn.disabled=false;processBtn.textContent='Process';}}).catch(error=>{clearInterval(progressInterval);progressText.textContent='Error!';progressDetails.textContent='Network error occurred';progressBar.style.background='#dc3545';if(processBtn){processBtn.disabled=false;processBtn.textContent='Process';}
console.error('Error:',error);});}});function playSong(filename){const audio=new Audio('/play_frequency/'+filename);audio.play();}
function viewFrequencies(songName){const songElement=document.querySelector(`[onclick*="${songName}"]`).closest('.song-item');const songInfo=songElement.querySelector('.song-info small');let frequencies=[];if(songInfo&&songInfo.textContent.includes('Frequencies:')){const freqText=songInfo.textContent.replace('Frequencies: ','');frequencies=freqText.split(', ');}else{frequencies=['500','1000','1500','2000','2500','3500','5000','7500'];}
let frequencyHtml='<html><head><title>Frequency Versions</title><style>';frequencyHtml+='body{font-family:Arial,sans-serif;padding:20px;background:#f4f4f4;}';frequencyHtml+='.audio-player{margin:20px 0;padding:15px;background:white;border-radius:8px;box-shadow:0 2px 5px rgba(0,0,0,0.1);}';frequencyHtml+='h3{color:#333;margin-bottom:10px;}';frequencyHtml+='audio{width:100%;}';frequencyHtml+='</style></head><body>';frequencyHtml+='<h2>Frequency Versions for '+songName+'</h2>';frequencies.forEach(freq=>{frequencyHtml+='<div class="audio-player">';frequencyHtml+='<h3>'+freq+' Frequencies</h3>';frequencyHtml+='<audio controls>';frequencyHtml+='<source src="/play_frequency/'+songName+'/'+freq+'" type="audio/wav">';frequencyHtml+='Your browser does not support the audio element.';frequencyHtml+='</audio>';frequencyHtml+='</div>';});frequencyHtml+='</body></html>';const newWindow=window.open('','_blank');newWindow.document.write(frequencyHtml);newWindow.document.close();}
function deleteSong(songId){if(confirm('Are you sure you want to delete this song?')){fetch('/admin/delete/'+songId,{method:'DELETE'}).then(response=>response.json()).then(data=>{if(data.success){location.reload();}else{alert('Error deleting song');}}).catch(error=>{console.error('Error:',error);alert('Error deleting song');});}}
document.addEventListener('DOMContentLoaded',function(){loadQueueStatus();const refreshQueueBtn=document.getElementById('refreshQueueBtn');const activateTodayBtn=document.getElementById('activateTodayBtn');const queueWeekBtn=document.getElementById('queueWeekBtn');const clearQueueBtn=document.getElementById('clearQueueBtn');if(refreshQueueBtn){refreshQueueBtn.addEventListener('click',loadQueueStatus);}
if(activateTodayBtn){activateTodayBtn.addEventListener('click',activateToday);}
if(queueWeekBtn){queueWeekBtn.addEventListener('click',queueSelectedSongs);}
if(clearQueueBtn){clearQueueBtn.addEventListener('click',clearCurrentQueue);}});function loadQueueStatus(){fetch('/admin/queue_status').then(response=>response.json()).then(data=>{if(data.success){displayQueueStatus(data.current_week,data.next_week);}else{console.error('Error loading queue status:',data.error);}}).catch(error=>{console.error('Error loading queue status:',error);});}
function displayQueueStatus(currentWeek,nextWeek){const currentWeekDiv=document.getElementById('currentWeekQueue');const nextWeekDiv=document.getElementById('nextWeekQueue');if(currentWeek.length===0){currentWeekDiv.innerHTML='<p>No songs queued for this week</p>';}else{currentWeekDiv.innerHTML=currentWeek.map(song=>`<div class="queue-item ${song.is_active ? 'active' : ''}"><div class="queue-song-info"><strong>${song.title}</strong>-${song.artist}<br><small>${song.date}(${song.status})</small></div>${song.is_active?'<span class="status-badge status-success">Active</span>':''}</div>`).join('');}
if(nextWeek.length===0){nextWeekDiv.innerHTML='<p>No songs queued for next week</p>';}else{nextWeekDiv.innerHTML=nextWeek.map(song=>`<div class="queue-item"><div class="queue-song-info"><strong>${song.title}</strong>-${song.artist}<br><small>${song.date}(${song.status})</small></div></div>`).join('');}}
function activateToday(){fetch('/admin/activate_today').then(response=>response.json()).then(data=>{if(data.success){alert('✅ '+data.message);loadQueueStatus();}else{alert('❌ Error: '+data.error);}}).catch(error=>{console.error('Error activating today:',error);alert('❌ Network error occurred');});}
function queueSelectedSongs(){const selectedSongs=[];const checkboxes=document.querySelectorAll('.queue-song-checkbox:checked');checkboxes.forEach(checkbox=>{selectedSongs.push(parseInt(checkbox.value));});if(selectedSongs.length===0){alert('Please select at least one song to queue');return;}
if(selectedSongs.length>7){alert('Maximum 7 songs allowed per week');return;}
fetch('/admin/queue_week',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify({song_ids:selectedSongs})}).then(response=>response.json()).then(data=>{if(data.success){alert('✅ '+data.message);loadQueueStatus();document.querySelectorAll('.queue-song-checkbox').forEach(cb=>cb.checked=false);}else{alert('❌ Error: '+data.error);}}).catch(error=>{console.error('Error queuing songs:',error);alert('❌ Network error occurred');});}
function clearCurrentQueue(){if(confirm('Are you sure you want to clear the current week\'s queue? This action cannot be undone.')){fetch('/admin/clear_queue',{method:'POST',headers:{'Content-Type':'application/json',}}).then(response=>response.json()).then(data=>{if(data.success){alert('✅ '+data.message);loadQueueStatus();}else{alert('❌ Error: '+data.error);}}).catch(error=>{console.error('Error clearing queue:',error);alert('❌ Network error occurred');});}}